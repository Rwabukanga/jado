server.port = 2002
security.basic.enable: false

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/sepro

# Username and secret
spring.datasource.username = root
spring.datasource.password = jado

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


#===========================================
#Web Security
#===========================================

#security.oauth2.client.clientId = 784595065444-eat80ksodbv3pvh0j6cc8ndv88i7bo75.apps.googleusercontent.com
#security.oauth2.client.clientSecret = wK0i_ZZTL7So3sHPJSJkw-Yp
#security.oauth2.client.accessTokenUri = https://www.googleapis.com/oauth2/v3/token
#security.oauth2.client.userAuthorizationUri = https://accounts.google.com/o/oauth2/auth
#security.oauth2.client.tokenName = oauth_token
#security.oauth2.client.authenticationScheme = query
#security.oauth2.client.clientAuthenticationScheme = form
#security.oauth2.client.scope = profile email


#security.oauth2.resource.userInfoUri = ""
#security.oauth2.resource.preferTokenInfo = false